name: build

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
    
env:
  CODECOV_TOKEN: 8b82b4ba-3230-44c9-b953-a2887b91b8e8

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci
      - run: npm run build
      - run: npm run test
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: test
          path: ./test.zip
          
  create-release-tag:
      name: "create release for new tag created"
      needs: build
      runs-on: ubuntu-latest
      steps:
        - name: "create release for new tag created"
          uses: actions/github-script@v6
          id: createRelease
          with:
            script: |
              try{
                const res = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: 'v1.0.11',
                name: 'v1.0.11',
              });
              }catch(error){
                core.setFailed(error.message);
              }
              
  upload-artifacts:
    name: "upload artifacts to release"
    runs-on: ubuntu-latest
    needs: create-release-tag
    steps:
      - name: "upload artifacts"
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: github.run_id,
            });
            
            let latestRelease = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
            });
            
            console.log(github.run_id)
            
            for (const artifact of allArtifacts.data.artifacts)
            {
              let download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
                archive_format: 'zip'
              });

              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: latestRelease.data.id,
                name: artifact.name + '.zip',
                data: download.data,
                headers:{
                  'content-type': 'application/zip',
                },
                url: latestRelease.data.upload_url
              });
              
              let fs = require('fs');
              fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/${artifact.name}.zip`, Buffer.from(download.data));
            }
